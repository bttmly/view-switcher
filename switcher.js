// Generated by CoffeeScript 1.7.1
(function() {
  window.ViewSwitcher = function(options) {
    var attrIdentifier, container, defaultTransitions, enter, exit, initialView, onFinish, prepare, rawViews, state, switchView, timedOffsets, useHistory, views;
    defaultTransitions = {
      exit: function(exitingView, callback) {
        this.height(this.height());
        return exitingView.fadeOut(1000, function() {
          return callback();
        });
      },
      prepare: function(exitingView, enteringView, callback) {
        var newHeight;
        newHeight = enteringView.outerHeight() + parseInt(this.css("padding-top"), 10) + parseInt(this.css("padding-bottom"), 10);
        return this.animate({
          height: newHeight
        }, 1000, function() {
          return callback();
        });
      },
      enter: function(enteringView, callback) {
        return enteringView.fadeIn(1000, function() {
          return callback();
        });
      }
    };
    rawViews = options.views;
    container = $(options.container);
    attrIdentifier = options.attrIdentifier || "id";
    initialView = options.initialView;
    useHistory = options.useHistory;
    onFinish = options.onFinish;
    timedOffsets = options.timedOffsets;
    exit = options.exit || defaultTransitions.exit;
    prepare = options.prepare || defaultTransitions.prepare;
    enter = options.enter || defaultTransitions.enter;
    views = {};
    views.selectView = function(name) {
      return this[name] || $("");
    };
    views.addView = function(view) {
      var name;
      view = $(view);
      name = view.attr(attrIdentifier);
      console.log(name);
      if (this[name]) {
        return console.error("A view or method named " + name + " is already registered on this ViewSwitcher");
      } else {
        return views[name] = view;
      }
    };
    views.removeView = function(name) {
      return this[name] = void 0;
    };
    if (rawViews instanceof jQuery) {
      rawViews.each(function() {
        return views.addView(this);
      });
    } else if (rawViews instanceof Array) {
      rawViews.forEach(function(el) {
        return views.addView(el);
      });
    } else if (rawViews.substr) {
      views.addView(rawViews);
    }
    state = {
      activeView: views[initialView],
      pastViews: []
    };
    switchView = function(incomingViewName) {
      var boundCleanup, boundEnter, boundPrepare, cleanup, incomingView;
      incomingView = views[incomingViewName];
      cleanup = function(callback) {
        state.pastViews.push(state.activeView);
        state.activeView = incomingView;
        if (callback) {
          return callback();
        }
      };
      if (timedOffsets) {
        setTimeout(exit.bind(container, incomingView, $.noop), options.exitDelay);
        setTimeout(prepare.bind(container, state.activeView, incomingView, $.noop), options.exitDelay + options.prepareDelay);
        setTimeout(enter.bind(container, incomingView, $.noop), options.exitDelay + options.prepareDelay + options.enterDelay);
        return setTimeout(cleanup.bind(null, onFinish), options.exitDelay + options.prepareDelay + options.enterDelay);
      } else {
        boundCleanup = cleanup.bind(null, onFinish);
        boundEnter = enter.bind(container, incomingView, boundCleanup);
        boundPrepare = prepare.bind(container, state.activeView, incomingView, boundEnter);
        return exit.bind(container, state.activeView, boundPrepare)();
      }
    };
    switchView.views = function() {
      return views;
    };
    switchView.addView = function(view) {
      return views.addView(view);
    };
    switchView.selectView = function(name) {
      return views.selectById(name);
    };
    switchView.removeView = function(name) {
      return views.removeView(name);
    };
    return switchView;
  };

}).call(this);
