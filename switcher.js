// Generated by CoffeeScript 1.7.1
(function() {
  var defaultTransitions;

  defaultTransitions = {
    exit: function(exitingView, callback) {
      this.height(this.height());
      return exitingView.fadeOut(500, function() {
        return callback();
      });
    },
    prepare: function(exitingView, enteringView, callback) {
      return callback();
    },
    enter: function(enteringView, callback) {
      return enteringView.fadeIn(500, function() {
        return callback();
      });
    }
  };

  (function($, root) {
    var ViewSwitcher;
    ViewSwitcher = (function() {
      function ViewSwitcher(options) {
        var initialView, rawViews, switcher;
        this.views = {};
        this.hub = $({});
        this.timedOffsets = options.timedOffsets, this.container = options.container, this.defaultView = options.defaultView;
        this.identifyingAttr = options.identifyingAttr || "id";
        this.inTransition = false;
        this.queue = false;
        this.state = {
          activeView: $(""),
          pastViews: []
        };
        this.exit = options.exit || defaultTransitions.exit;
        this.prepare = options.prepare || defaultTransitions.prepare;
        this.enter = options.enter || defaultTransitions.enter;
        switcher = this;
        rawViews = options.views;
        if (rawViews instanceof jQuery) {
          rawViews.each(function() {
            return switcher.addView(this);
          });
        } else if (rawViews instanceof Array) {
          rawViews.forEach(function(el) {
            return switcher.addView(el);
          });
        } else if (rawViews.substr) {
          switcher.addView(rawViews);
        }
        initialView = this.views[location.hash.substr(1) || defaultView];
        this.prepare.bind(this.container, this.state.activeView, initialView, this.enter.bind(this.container, initialView, this.finishRender.bind(this, initialView)))();
      }

      ViewSwitcher.prototype.addView = function(view) {
        var name;
        view = $(view);
        name = view.attr(this.identifyingAttr);
        if (this.views[name]) {
          return console.error("A view or method named " + name + " is already registered on this ViewSwitcher");
        } else {
          return this.views[name] = view;
        }
      };

      ViewSwitcher.prototype.removeView = function(name) {
        return this.views[name] = void 0;
      };

      ViewSwitcher.prototype.selectView = function(name) {
        return this.views[name] || $("");
      };

      ViewSwitcher.prototype.switchTo = function(incomingViewName) {
        var boundCleanup, boundEnter, boundPrepare, incomingView;
        console.log(incomingViewName);
        if (this.inTransition) {
          this.queue = incomingViewName;
          return false;
        }
        incomingView = this.views[incomingViewName];
        this.inTransition = true;
        if (this.timedOffsets) {
          setTimeout(this.exit.bind(this.container, incomingView, $.noop), 0);
          setTimeout(this.prepare.bind(this.container, this.state.activeView, incomingView, $.noop), options.exitDelay);
          setTimeout(this.enter.bind(this.container, incomingView, $.noop), options.exitDelay + options.prepareDelay);
          setTimeout(this.finishRender.bind(this, incomingView), options.exitDelay + options.prepareDelay + options.enterDelay);
        } else {
          boundCleanup = this.finishRender.bind(this, incomingView);
          boundEnter = this.enter.bind(this.container, incomingView, boundCleanup);
          boundPrepare = this.prepare.bind(this.container, this.state.activeView, incomingView, boundEnter);
          this.exit.bind(this.container, this.state.activeView, boundPrepare)();
        }
        return true;
      };

      ViewSwitcher.prototype.finishRender = function(incomingView) {
        this.state.pastViews.push(this.state.activeView);
        this.state.activeView = incomingView;
        this.trigger("renderComplete", {
          view: this.state.activeView
        });
        this.inTransition = false;
        if (this.queue) {
          this.switchTo(this.queue);
          return this.queue = "";
        }
      };

      ViewSwitcher.prototype.on = function() {
        return this.hub.on.apply(this.hub, arguments);
      };

      ViewSwitcher.prototype.off = function() {
        return this.hub.off.apply(this.hub, arguments);
      };

      ViewSwitcher.prototype.trigger = function() {
        return this.hub.trigger.apply(this.hub, arguments);
      };

      return ViewSwitcher;

    })();
    return root.ViewSwitcher = ViewSwitcher;
  })(jQuery, (function() {
    if (typeof exports !== "undefined") {
      return exports;
    } else {
      return window;
    }
  })());

}).call(this);
